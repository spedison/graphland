package br.com.spedison.graphland.dijkstra.parses;

import br.com.spedison.graphland.base.Graph;
import br.com.spedison.graphland.dijkstra.base.DijkstraContent;
import br.com.spedison.graphland.loadgraphs.ParseLine;
import br.com.spedison.logger.ConfigLogger;

import java.util.Date;
import java.util.Objects;
import java.util.logging.Logger;

public class GraphDijkstraParser extends ParseLine<Graph<DijkstraContent, Integer>, Graph<DijkstraContent, Integer>> {

    private static Logger log = ConfigLogger.getLogger(GraphDijkstraParser.class);

    @Override
    public boolean isLineParser(String line) {
        if (Objects.isNull(line))
            return false;

        boolean start = line.toLowerCase().trim().startsWith("graph::");
        boolean numParts = line.split(ParseLine.strReg).length == 3;
        return start && numParts;
    }

    @Override
    public Graph<DijkstraContent, Integer> parseLine(String line) {
        String[] data = line.split(ParseLine.strReg);
        boolean canUpdateAll = false;
        switch (data[1].trim().toLowerCase()) {
            case "name" -> getGraph().setName(data[2]);
            case "root" -> {
                getGraph().setStartNode(getGraph().findNodeByName(data[2].trim()));
                canUpdateAll = true;
            }
            case "type" -> {
                if (!data[2].trim().equalsIgnoreCase("Integer,<Integer,Node>"))
                    throw new RuntimeException("This Graph is not loaded because the tyoe is diferent of Integer,Integer. Use the other loader.");
            }
            default -> {
                log.warning("'Graph::%s::' Not defined while read file.".formatted(data[1]));
            }
        }
        if (canUpdateAll) {
            getGraph().getListNodes().stream().forEach(
                    n -> {
                        var str = n.getContent().getPreviusNodeName();
                        var node = getGraph().findNodeByName(str);
                        n.getContent().setPreviusNode(node);
                    }
            );
        }

        return getGraph();
    }

    @Override
    public String parse(Graph<DijkstraContent, Integer> object) {
        return ("## Generated by GraphLand Library in : " +
                (new Date()) + "\n" +
                "## Author : SpEdison\n\n" +
                "Graph::name::%s\n" +
                "Graph::type::Integer,<Integer,Node>\n" +
                "Graph::root::%s")
                .formatted(
                        getGraph().getName(),
                        getGraph().getStartNode().getName()
                );
    }
}