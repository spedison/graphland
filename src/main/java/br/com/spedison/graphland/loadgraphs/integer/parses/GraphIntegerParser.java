package br.com.spedison.graphland.loadgraphs.integer.parses;

import br.com.spedison.graphland.base.Graph;
import br.com.spedison.graphland.loadgraphs.ParseLine;

import java.util.Date;
import java.util.Objects;

public class GraphIntegerParser extends ParseLine<Graph<Integer, Integer>,Graph<Integer,Integer>> {
    @Override
    public boolean isLineParser(String line) {
        if (Objects.isNull(line))
            return false;

        boolean start = line.toLowerCase().trim().startsWith("graph::");
        boolean numParts = line.split(ParseLine.strReg).length == 3;
        return start && numParts;
    }

    @Override
    public Graph<Integer, Integer> parseLine(String line) {
        String[] data = line.split(ParseLine.strReg);
        switch (data[1].trim().toLowerCase()) {
            case "name" -> getGraph().setName(data[2]);
            case "root" -> getGraph().setStartNode(getGraph().findNodeByName(data[2].trim()));
            case "type" -> {
                if (data[2].trim().equalsIgnoreCase("Integer,Integer"))
                    throw new RuntimeException("This Graph is not loaded because the tyoe is diferent of Integer,Integer. Use the other loader.");
            }
        }
        return getGraph();
    }

    @Override
    public String parse(Graph<Integer, Integer> object) {
        return ("## Generated by GraphLand Library in : " +
                (new Date()) + "\n" +
                "## Author : SpEdison\n\n"+
                "Graph::name::%s\n" +
                "Graph::type::Integer,Integer\n" +
                "Graph::root::%s")
                        .formatted(
                                getGraph().getName(),
                                getGraph().getStartNode().getName()
                        );
    }
}